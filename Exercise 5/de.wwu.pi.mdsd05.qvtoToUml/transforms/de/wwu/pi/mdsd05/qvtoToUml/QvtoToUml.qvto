modeltype Uml uses "http://www.eclipse.org/uml2/4.0.0/UML";
modeltype CrudModel "strict" uses "http://www.wwu.de/pi/mdsd/crudDsl/CrudDsl";
	

transformation QvtoToUml(in Source: CrudModel, out Target: Uml);

main() {
Source.rootObjects()[CrudModel::CrudModel] -> map toUml();

}

intermediate property CrudModel::CrudModel::associations : Sequence(Association);
intermediate property CrudModel::CrudModel::primitives : Set(PrimitiveType);

mapping CrudModel::CrudModel::toUml() : Uml::Model {
name := self.name;
ownedType := self.entities -> map toClass();
ownedType += self.primitives; 
ownedType += self.associations; 
}

mapping Entity::toClass(): Uml::Class
{
name := self.name;
isAbstract := self._abstract;
ownedAttribute := self.properties[Attribute] -> map toAttribute(); 
ownedAttribute += self.properties[Reference] -> map toAttribute();
if(self.superType!=null)
then result.superClass := self.superType.late resolveone(Class) 
endif;
}

mapping Attribute::toAttribute(): Property
{
name := self.name;
var p := self.type.map toPrimitive();
self.container().container().oclAsType(CrudModel::CrudModel).primitives += p;
type := p;
if(self.optional)
then result.lower := 0
else result.lower := 1
endif;
result.upper:=1;
}

mapping AttributeType::toPrimitive(): PrimitiveType
{
name := self.toString();
}

mapping Reference::toAttribute(): Property{
name := self.name;
type := self.type.late resolveone(Class);
if(self.multiplicity.toString() = "[1]")
then	
	{ 
	self.container().container().oclAsType(CrudModel::CrudModel).associations +=
	object Association
			{
			memberEnd += self.late resolveone(Property);
			memberEnd += self.opposite.late resolveone(Property);
			};
		result.lower := 1;
		result.upper := 1;	
	}
else 
{
	result.lower := 0;
	result.upper := *;
}	
endif;

}

