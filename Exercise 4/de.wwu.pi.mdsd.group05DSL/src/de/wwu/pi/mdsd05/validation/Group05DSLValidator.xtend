/*
 * generated by Xtext
 */
package de.wwu.pi.mdsd05.validation

import de.wwu.pi.mdsd05.group05DSL.Entitytype
import de.wwu.pi.mdsd05.group05DSL.EntryWindow
import de.wwu.pi.mdsd05.group05DSL.Field
import de.wwu.pi.mdsd05.group05DSL.Group05DSLPackage
import de.wwu.pi.mdsd05.group05DSL.Model
import de.wwu.pi.mdsd05.group05DSL.Property
import de.wwu.pi.mdsd05.group05DSL.UIElement
import java.util.ArrayList
import org.eclipse.xtext.validation.Check

import static extension de.wwu.pi.mdsd05.helper.HelperMethods.*

import de.wwu.pi.mdsd05.group05DSL.Button
import de.wwu.pi.mdsd05.group05DSL.Inscription

import de.wwu.pi.mdsd05.group05DSL.ListWindow


//import org.eclipse.xtext.validation.Check

/**
 * Custom validation rules. 
 *
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
class Group05DSLValidator extends AbstractGroup05DSLValidator {


	@Check
	def public void checkAbtractFeatures(Entitytype entitytype)
	{
		if(!isSuperClass(entitytype))
		{
			error("class has no superclass and may not be abstract", Group05DSLPackage.Literals.ENTITYTYPE__ABSTRACT);
		}
		
	}

	def public boolean isSuperClass(Entitytype entitytype)
	{
		var entitytypes = (entitytype.eContainer() as Model).getEntitytypes();
		for(Entitytype e: entitytypes){
			if(e.getSupertype().equals(entitytype)) return true;
		}	
		return false;
	}


	@Check
	def checkWindowLimit(Entitytype entitytype) {
		val model = entitytype.eContainer as Model;
		
		var entryWindows = model.uiwindows.filter[it instanceof EntryWindow && it.entitytype == entitytype];
		var listWindows = model.uiwindows.filter[it instanceof ListWindow && it.entitytype == entitytype];
		if (entryWindows.size > 1) {
			error('Entitytype ' + entitytype.name + ' has more than one entry window.', entitytype, Group05DSLPackage.Literals.ENTITYTYPE__NAME)
		}
		if (listWindows.size > 1) {
			error('Entitytype ' + entitytype.name + ' has more than one list window.', entitytype, Group05DSLPackage.Literals.ENTITYTYPE__NAME)
		}
		
	}



@Check
def checkUIElementOverlapping(EntryWindow ewindow){
	
	for (element : ewindow.getElements())
		for (element2 : ewindow.getElements())
		if (!(element == element2) && overlapping(element, element2))
	
	warning(element + "and" + element2 + "overlap each other!", Group05DSLPackage.Literals.ENTRY_WINDOW__ELEMENTS);
}

def overlapping(UIElement element, UIElement element2){
	val x1 = element.getPosition().getX();
	val y1 = element.getPosition().getY();
	val x2 = element2.getPosition().getX();
	val y2 = element2.getPosition().getY();
	val width1 = element.getSize().getWidth();
	val width2 = element2.getSize().getWidth();
	val height2 = element2.getSize().getHeight();
	val height1 = element.getSize().getHeight();

	if (x1 < x2 && (x1 + width1) > x2) return true
	if (x1 > x2 && (x2 + width2) > x1) return true
	if (y1 < y2 && (y1 + height1) > y2) return true
	if (y1 > y2 && (y2 + height2) > y1) return true
	return false
}
//  public static val INVALID_NAME = 'invalidName'
//
//	@Check
//	def checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.name.charAt(0))) {
//			warning('Name should start with a capital', 
//					MyDslPackage.Literals.GREETING__NAME,
//					INVALID_NAME)
//		}
//	}
 @Check
 def areAllPropertiesIncludedInTheEntrywindow(EntryWindow entryWindow){
 	val allProperties=entryWindow.entitytype.allPropertiesIncludingSuperproperties;
 	val fields= new ArrayList<Field>;
 	fields += entryWindow.elements.filter[elem|elem instanceof Field].map[elem|elem as Field];
 	for (Property property: allProperties){
 		if (!fields.map[field|field.property].contains(property)){
 			error("The property " + property.name + " has no corresponding field in the entryWindow " + entryWindow.name + "!", entryWindow.eContainer as Model,entryWindow.eContainmentFeature);
 		}
 	}
 }
 
 @Check
 def missingCeateEditButton(EntryWindow window)
 {
 	var Boolean exists = false;
 
  	for(UIElement elem:  window.elements.filter[e|e instanceof Button])
 	{
 		var Button btn = elem as Button		
		if (btn.inscription.equals(Inscription.CREATE_EDIT))
		{
			exists = true;
		}
 	}
 	
 	if(!exists)
 	{
 		error ("EntryWindow requires Create/Edit Button", window.eContainer, window.eContainingFeature);
 	}
 
 }
 
}
